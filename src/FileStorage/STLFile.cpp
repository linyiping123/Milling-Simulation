#include "STLFile.h"

#include <array>
#include <filesystem>
#include <fstream>

static const char SOLID[] = "solid";
static const char FACET_NORMAL[] = "facet normal";
static const char OUTER_LOOP[] = "outer loop";
static const char VERTEX[] = "vertex";
static const char END_SOLID[] = "endsolid";

static void writeFileBinaryHeader(std::ofstream& ofs)
{
    std::string header = "STL File Generated by Milling Simulator";
    header.resize(80, ' ');
    ofs.write(header.c_str(), 80);
}

STLFile::Format STLFile::checkFormat(const std::string& filename)
{
    auto fileSize = std::filesystem::file_size(filename);
    std::ifstream ifs(filename, std::ios::in | std::ios::binary);

    if (fileSize < 15) {
        return Format::Invalid;
    }

    char header[10];
    ifs.read(header, 6);
    if (std::string(header, 5) == SOLID) {
        ifs.seekg(0, std::ios::beg);
        std::string line;
        while (std::getline(ifs, line)) {
            if (line.starts_with(END_SOLID)) {
                return Format::Ascii;
            }
        }
    }

    if (fileSize < 84) {
        ifs.close();
        return Format::Invalid;
    }

    ifs.seekg(80, std::ios::beg);
    uint32_t numTriangles;
    ifs.read(reinterpret_cast<char*>(&numTriangles), sizeof(numTriangles));
    if (fileSize != 84 + numTriangles * 50) {
        ifs.close();
        return Format::Invalid;
    }

    ifs.close();
    return Format::Binary;
}

bool STLFile::Load(const std::string& filename, std::vector<Triangle3Df>& triangles)
{
    switch (checkFormat(filename)) {
    case Format::Ascii:
        LoadAscii(filename, triangles);
        return true;
    case Format::Binary:
        LoadBinary(filename, triangles);
        return true;
    default:
        return false;
    }
}

bool STLFile::Load(const std::string& filename, std::vector<Vector3Df>& vertices, std::vector<Vector3Df>& normals)
{
    switch (checkFormat(filename)) {
    case Format::Ascii:
        LoadAscii(filename, vertices, normals);
        return true;
    case Format::Binary:
        LoadBinary(filename, vertices, normals);
        return true;
    default:
        return false;
    }
}

void STLFile::LoadBinary(const std::string& filename, std::vector<Triangle3Df>& triangles)
{
    std::ifstream ifs(filename, std::ios::in | std::ios::binary);

    char header[80];
    ifs.read(header, 80);

    uint32_t numTriangles;
    ifs.read(reinterpret_cast<char*>(&numTriangles), 4);

    triangles.resize(numTriangles);

    for (uint32_t i = 0; i < numTriangles; i++) {
        Vector3Df normal;
        ifs.read(reinterpret_cast<char*>(&normal), sizeof(normal));

        std::array<Vector3Df, 3> vertex;
        ifs.read(reinterpret_cast<char*>(vertex.data()), sizeof(vertex));

        uint16_t attribute;
        ifs.read(reinterpret_cast<char*>(&attribute), sizeof(attribute));

        triangles[i] = Triangle3Df(vertex, normal);
    }

    ifs.close();
}

void STLFile::LoadBinary(const std::string& filename, std::vector<Vector3Df>& vertices, std::vector<Vector3Df>& normals)
{
    std::ifstream ifs(filename, std::ios::in | std::ios::binary);

    char header[80];
    ifs.read(header, 80);

    uint32_t numTriangles;
    ifs.read(reinterpret_cast<char*>(&numTriangles), sizeof(numTriangles));

    vertices.resize(numTriangles * 3);
    normals.resize(numTriangles);

    for (uint32_t i = 0; i < numTriangles; i++) {
        Vector3Df normal;
        ifs.read(reinterpret_cast<char*>(&normal), sizeof(normal));

        std::array<Vector3Df, 3> vertex;
        ifs.read(reinterpret_cast<char*>(vertex.data()), sizeof(vertex));

        uint16_t attribute;
        ifs.read(reinterpret_cast<char*>(&attribute), sizeof(attribute));

        normals[i] = normal.normalize();
        std::copy(vertex.begin(), vertex.end(), vertices.begin() + i * 3);
    }

    ifs.close();
}

void STLFile::LoadAscii(const std::string& filename, std::vector<Triangle3Df>& triangles)
{
    std::ifstream ifs(filename, std::ios::in | std::ios::binary);
    auto fileLines = std::count(std::istreambuf_iterator<char>(ifs), std::istreambuf_iterator<char>(), '\n');
    ifs.seekg(0, std::ios::beg);

    std::string header;
    std::getline(ifs, header);

    triangles.resize((fileLines - 2) / 7);
    size_t index = 0;
    Vector3Df normal;
    std::array<Vector3Df, 3> vertex;
    std::string line;

    while (std::getline(ifs, line)) {
        if (std::string::size_type pos = line.find(FACET_NORMAL); pos != std::string::npos) {
            std::istringstream iss(line.substr(pos + sizeof(FACET_NORMAL)));
            iss >> normal.x >> normal.y >> normal.z;
        } else if (line.find(OUTER_LOOP) != std::string::npos) {
            for (int i = 0; i < 3; i++) {
                std::getline(ifs, line);
                std::string::size_type pos = line.find(VERTEX);
                std::istringstream iss(line.substr(pos + sizeof(VERTEX)));
                iss >> vertex[i].x >> vertex[i].y >> vertex[i].z;
            }
            triangles[index++] = Triangle3Df(vertex, normal);
        }
    }

    ifs.close();
}

void STLFile::LoadAscii(const std::string& filename, std::vector<Vector3Df>& vertices, std::vector<Vector3Df>& normals)
{
    std::ifstream ifs(filename, std::ios::in | std::ios::binary);
    auto fileLines = std::count(std::istreambuf_iterator<char>(ifs), std::istreambuf_iterator<char>(), '\n');
    ifs.seekg(0, std::ios::beg);

    std::string header;
    std::getline(ifs, header);

    vertices.resize((fileLines - 2) / 7 * 3);
    normals.resize((fileLines - 2) / 7);
    size_t indexVertices = 0;
    size_t indexNormals = 0;
    Vector3Df normal;
    std::array<Vector3Df, 3> vertex;
    std::string line;

    while (std::getline(ifs, line)) {
        if (std::string::size_type pos = line.find(FACET_NORMAL); pos != std::string::npos) {
            std::istringstream iss(line.substr(pos + sizeof(FACET_NORMAL)));
            iss >> normal.x >> normal.y >> normal.z;
            normals[indexNormals++] = normal;
        } else if (line.find(OUTER_LOOP) != std::string::npos) {
            for (int i = 0; i < 3; i++) {
                std::getline(ifs, line);
                std::string::size_type pos = line.find(VERTEX);
                std::istringstream iss(line.substr(pos + sizeof(VERTEX)));
                iss >> vertex[i].x >> vertex[i].y >> vertex[i].z;
                vertices[indexVertices++] = vertex[i];
            }
        }
    }

    ifs.close();
}

void STLFile::Save(const std::vector<Triangle3Df>& triangles, const std::string& filename)
{
    std::ofstream ofs(filename, std::ios::out | std::ios::binary);

    writeFileBinaryHeader(ofs);

    auto numTriangles = static_cast<uint32_t>(triangles.size());
    ofs.write(reinterpret_cast<char*>(&numTriangles), sizeof(numTriangles));

    for (uint32_t i = 0; i < numTriangles; ++i) {
        const Triangle3Df& triangle = triangles[i];
        ofs.write(reinterpret_cast<const char*>(&triangle.Normal), sizeof(triangle.Normal));
        ofs.write(reinterpret_cast<const char*>(&triangle.Vertices[0]), sizeof(triangle.Vertices[0]));
        ofs.write(reinterpret_cast<const char*>(&triangle.Vertices[1]), sizeof(triangle.Vertices[1]));
        ofs.write(reinterpret_cast<const char*>(&triangle.Vertices[2]), sizeof(triangle.Vertices[2]));
        uint16_t attribute = 0;
        ofs.write(reinterpret_cast<const char*>(&attribute), sizeof(attribute));
    }

    ofs.close();
}

void STLFile::Save(const std::vector<Vector3Df>& vertices, const std::vector<Vector3Df>& normals, const std::string& filename)
{
    if (vertices.size() == normals.size()) {
        Save1Vertex1Normal(vertices, normals, filename);
    } else if (vertices.size() / 3 == normals.size()) {
        Save3Vertices1Normal(vertices, normals, filename);
    } else {
        throw std::runtime_error("STLFile::Save: not valid data");
    }
}

void STLFile::Save1Vertex1Normal(const std::vector<Vector3Df>& vertices, const std::vector<Vector3Df>& normals, const std::string& filename)
{
    std::ofstream ofs(filename, std::ios::out | std::ios::binary);

    writeFileBinaryHeader(ofs);

    uint32_t numTriangles = vertices.size() / 3;
    ofs.write(reinterpret_cast<char*>(&numTriangles), sizeof(numTriangles));

    for (uint32_t i = 0; i < numTriangles; ++i) {
        for (Vector3Df v : { normals[i * 3].normalize(), vertices[i * 3], vertices[i * 3 + 1], vertices[i * 3 + 2] }) {
            ofs.write(reinterpret_cast<char*>(&v), sizeof(Vector3Df));
        }

        uint16_t attribute = 0;
        ofs.write(reinterpret_cast<char*>(&attribute), sizeof(attribute));
    }

    ofs.close();
}

void STLFile::Save3Vertices1Normal(const std::vector<Vector3Df>& vertices, const std::vector<Vector3Df>& normals, const std::string& filename)
{
    std::ofstream ofs(filename, std::ios::out | std::ios::binary);

    writeFileBinaryHeader(ofs);

    uint32_t numTriangles = vertices.size() / 3;
    ofs.write(reinterpret_cast<char*>(&numTriangles), sizeof(numTriangles));

    for (uint32_t i = 0; i < numTriangles; ++i) {
        for (Vector3Df v : { normals[i].normalize(), vertices[i * 3], vertices[i * 3 + 1], vertices[i * 3 + 2] }) {
            ofs.write(reinterpret_cast<char*>(&v), sizeof(Vector3Df));
        }

        uint16_t attribute = 0;
        ofs.write(reinterpret_cast<char*>(&attribute), sizeof(attribute));
    }

    ofs.close();
}
